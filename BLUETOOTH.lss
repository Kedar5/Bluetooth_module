
BLUETOOTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000832  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  00800080  00800080  000008e6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000135  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000492  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000250  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000612  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bd  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031d  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	c2 c0       	rjmp	.+388    	; 0x19c <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 30       	cpi	r26, 0x02	; 2
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	15 d1       	rcall	.+554    	; 0x284 <main>
  5a:	e9 c3       	rjmp	.+2002   	; 0x82e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
  5e:	9c 01       	movw	r18, r24
  60:	40 e0       	ldi	r20, 0x00	; 0
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	ca 01       	movw	r24, r20
  66:	b9 01       	movw	r22, r18
  68:	60 5a       	subi	r22, 0xA0	; 160
  6a:	7c 41       	sbci	r23, 0x1C	; 28
  6c:	89 4e       	sbci	r24, 0xE9	; 233
  6e:	9f 4f       	sbci	r25, 0xFF	; 255
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	66 0f       	add	r22, r22
  74:	77 1f       	adc	r23, r23
  76:	88 1f       	adc	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	fa 95       	dec	r31
  7c:	d1 f7       	brne	.-12     	; 0x72 <serial_init+0x14>
  7e:	e4 e0       	ldi	r30, 0x04	; 4
  80:	22 0f       	add	r18, r18
  82:	33 1f       	adc	r19, r19
  84:	44 1f       	adc	r20, r20
  86:	55 1f       	adc	r21, r21
  88:	ea 95       	dec	r30
  8a:	d1 f7       	brne	.-12     	; 0x80 <serial_init+0x22>
  8c:	2f d3       	rcall	.+1630   	; 0x6ec <__udivmodsi4>
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
	//Setup q
	UQFront=UQEnd=-1;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 93 81 00 	sts	0x0081, r24
  98:	80 91 81 00 	lds	r24, 0x0081
  9c:	80 93 80 00 	sts	0x0080, r24

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
  a0:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
  a2:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  a4:	86 e8       	ldi	r24, 0x86	; 134
  a6:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  a8:	88 e9       	ldi	r24, 0x98	; 152
  aa:	8a b9       	out	0x0a, r24	; 10
	sei();
  ac:	78 94       	sei

}
  ae:	08 95       	ret

000000b0 <serial_read>:
unsigned char serial_read()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
  b0:	80 91 80 00 	lds	r24, 0x0080
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	11 f4       	brne	.+4      	; 0xbc <serial_read+0xc>
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	1d c0       	rjmp	.+58     	; 0xf6 <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
  bc:	e0 91 80 00 	lds	r30, 0x0080
  c0:	ff 27       	eor	r31, r31
  c2:	e7 fd       	sbrc	r30, 7
  c4:	f0 95       	com	r31
  c6:	ee 57       	subi	r30, 0x7E	; 126
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
  cc:	90 91 80 00 	lds	r25, 0x0080
  d0:	80 91 81 00 	lds	r24, 0x0081
  d4:	98 17       	cp	r25, r24
  d6:	41 f4       	brne	.+16     	; 0xe8 <serial_read+0x38>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 93 81 00 	sts	0x0081, r24
  de:	80 91 81 00 	lds	r24, 0x0081
  e2:	80 93 80 00 	sts	0x0080, r24
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <serial_read+0x46>
	}
	else
	{
		UQFront++;
  e8:	80 91 80 00 	lds	r24, 0x0080
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 80 00 	sts	0x0080, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
  f2:	80 91 80 00 	lds	r24, 0x0080
		UQFront=0;
	}

	return data;
}
  f6:	8e 2f       	mov	r24, r30
  f8:	08 95       	ret

000000fa <serial_char>:

void serial_char(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <serial_char>

	//Now write
	UDR=data;
  fe:	8c b9       	out	0x0c, r24	; 12
}
 100:	08 95       	ret

00000102 <serial_string>:
 ltoa( num , buffer, 10);
    serial_string(buffer);
}

void serial_string(char *str)
{
 102:	fc 01       	movw	r30, r24
 104:	04 c0       	rjmp	.+8      	; 0x10e <serial_string+0xc>
}

void serial_char(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 106:	5d 9b       	sbis	0x0b, 5	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <serial_string+0x4>

	//Now write
	UDR=data;
 10a:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
 10c:	31 96       	adiw	r30, 0x01	; 1
    serial_string(buffer);
}

void serial_string(char *str)
{
	while((*str)!='\0')
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	c9 f7       	brne	.-14     	; 0x106 <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
 114:	08 95       	ret

00000116 <UReadBuffer>:

void UReadBuffer(void *buff,uint16_t len)
{
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	7c 01       	movw	r14, r24
 124:	8b 01       	movw	r16, r22
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	06 c0       	rjmp	.+12     	; 0x138 <UReadBuffer+0x22>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
 12c:	c1 df       	rcall	.-126    	; 0xb0 <serial_read>
 12e:	f7 01       	movw	r30, r14
 130:	ec 0f       	add	r30, r28
 132:	fd 1f       	adc	r31, r29
 134:	80 83       	st	Z, r24
}

void UReadBuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	c0 17       	cp	r28, r16
 13a:	d1 07       	cpc	r29, r17
 13c:	b8 f3       	brcs	.-18     	; 0x12c <UReadBuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	08 95       	ret

0000014c <serialdata_available>:

uint8_t serialdata_available()
{
	if(UQFront==-1) return 0;
 14c:	80 91 80 00 	lds	r24, 0x0080
 150:	8f 3f       	cpi	r24, 0xFF	; 255
 152:	11 f4       	brne	.+4      	; 0x158 <serialdata_available+0xc>
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	1a c0       	rjmp	.+52     	; 0x18c <serialdata_available+0x40>
	if(UQFront<UQEnd)
 158:	90 91 80 00 	lds	r25, 0x0080
 15c:	80 91 81 00 	lds	r24, 0x0081
 160:	98 17       	cp	r25, r24
 162:	34 f4       	brge	.+12     	; 0x170 <serialdata_available+0x24>
		return(UQEnd-UQFront+1);
 164:	90 91 81 00 	lds	r25, 0x0081
 168:	80 91 80 00 	lds	r24, 0x0080
 16c:	9f 5f       	subi	r25, 0xFF	; 255
 16e:	0d c0       	rjmp	.+26     	; 0x18a <serialdata_available+0x3e>
	else if(UQFront>UQEnd)
 170:	90 91 80 00 	lds	r25, 0x0080
 174:	80 91 81 00 	lds	r24, 0x0081
 178:	89 17       	cp	r24, r25
 17a:	14 f0       	brlt	.+4      	; 0x180 <serialdata_available+0x34>
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	06 c0       	rjmp	.+12     	; 0x18c <serialdata_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 180:	90 91 81 00 	lds	r25, 0x0081
 184:	80 91 80 00 	lds	r24, 0x0080
 188:	9f 57       	subi	r25, 0x7F	; 127
 18a:	98 1b       	sub	r25, r24
	else
		return 1;
}
 18c:	89 2f       	mov	r24, r25
 18e:	08 95       	ret

00000190 <UFlushBuffer>:
void UFlushBuffer()
{
 190:	01 c0       	rjmp	.+2      	; 0x194 <UFlushBuffer+0x4>
	while(serialdata_available()>0)
	{
		serial_read();
 192:	8e df       	rcall	.-228    	; 0xb0 <serial_read>
	else
		return 1;
}
void UFlushBuffer()
{
	while(serialdata_available()>0)
 194:	db df       	rcall	.-74     	; 0x14c <serialdata_available>
 196:	88 23       	and	r24, r24
 198:	e1 f7       	brne	.-8      	; 0x192 <UFlushBuffer+0x2>
	{
		serial_read();
	}
}
 19a:	08 95       	ret

0000019c <__vector_11>:


ISR(USART_RXC_VECT)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	//Read the data
	char data=UDR;
 1b4:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 1b6:	80 91 81 00 	lds	r24, 0x0081
 1ba:	8f 37       	cpi	r24, 0x7F	; 127
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <__vector_11+0x2a>
 1be:	80 91 80 00 	lds	r24, 0x0080
 1c2:	88 23       	and	r24, r24
 1c4:	71 f0       	breq	.+28     	; 0x1e2 <__vector_11+0x46>
 1c6:	80 91 81 00 	lds	r24, 0x0081
 1ca:	20 91 80 00 	lds	r18, 0x0080
 1ce:	99 27       	eor	r25, r25
 1d0:	87 fd       	sbrc	r24, 7
 1d2:	90 95       	com	r25
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	33 27       	eor	r19, r19
 1d8:	27 fd       	sbrc	r18, 7
 1da:	30 95       	com	r19
 1dc:	82 17       	cp	r24, r18
 1de:	93 07       	cpc	r25, r19
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <__vector_11+0x54>
	{
		//Q Full
		UQFront++;
 1e2:	80 91 80 00 	lds	r24, 0x0080
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 80 00 	sts	0x0080, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 1ec:	80 91 80 00 	lds	r24, 0x0080
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 1f0:	80 91 81 00 	lds	r24, 0x0081
 1f4:	8f 37       	cpi	r24, 0x7F	; 127
 1f6:	19 f4       	brne	.+6      	; 0x1fe <__vector_11+0x62>
		UQEnd=0;
 1f8:	10 92 81 00 	sts	0x0081, r1
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_11+0x6c>
	else
		UQEnd++;
 1fe:	80 91 81 00 	lds	r24, 0x0081
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 81 00 	sts	0x0081, r24


	URBuff[UQEnd]=data;
 208:	e0 91 81 00 	lds	r30, 0x0081
 20c:	ff 27       	eor	r31, r31
 20e:	e7 fd       	sbrc	r30, 7
 210:	f0 95       	com	r31
 212:	ee 57       	subi	r30, 0x7E	; 126
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 218:	80 91 80 00 	lds	r24, 0x0080
 21c:	8f 3f       	cpi	r24, 0xFF	; 255
 21e:	11 f4       	brne	.+4      	; 0x224 <__vector_11+0x88>
 220:	10 92 80 00 	sts	0x0080, r1

}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <bluetooth_read>:

#ifndef BLUETOOTH_H
#define BLUETOOTH_H

void bluetooth_read(char *msg,unsigned char length)
{
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 244:	16 2f       	mov	r17, r22

    while(serialdata_available()<length);	
 246:	82 df       	rcall	.-252    	; 0x14c <serialdata_available>
 248:	81 17       	cp	r24, r17
 24a:	e8 f3       	brcs	.-6      	; 0x246 <bluetooth_read+0xa>
	UReadBuffer(msg,length);
 24c:	ce 01       	movw	r24, r28
 24e:	61 2f       	mov	r22, r17
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	61 df       	rcall	.-318    	; 0x116 <UReadBuffer>
	
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	08 95       	ret

0000025c <str_num>:


int str_num(char *_buffer)
{

return atoi(_buffer);
 25c:	69 d2       	rcall	.+1234   	; 0x730 <atoi>

}
 25e:	08 95       	ret

00000260 <compare>:


int compare(const char *cmd1,const char *cmd2)
{
    unsigned char len;
	len=strlen(cmd2);
 260:	db 01       	movw	r26, r22
 262:	0d 90       	ld	r0, X+
 264:	00 20       	and	r0, r0
 266:	e9 f7       	brne	.-6      	; 0x262 <compare+0x2>
 268:	11 97       	sbiw	r26, 0x01	; 1
 26a:	a6 1b       	sub	r26, r22
 26c:	b7 0b       	sbc	r27, r23
	

if(strncasecmp(cmd1,cmd2,len)==0)
 26e:	4a 2f       	mov	r20, r26
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	7b d2       	rcall	.+1270   	; 0x76a <strncasecmp>
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	89 2b       	or	r24, r25
 27a:	11 f4       	brne	.+4      	; 0x280 <compare+0x20>
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
{

    return 0;
}

}
 280:	c9 01       	movw	r24, r18
 282:	08 95       	ret

00000284 <main>:
#include"serial.h"
#include"bluetooth.h"


int main()
{
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	df 93       	push	r29
 28a:	cf 93       	push	r28
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	2a 97       	sbiw	r28, 0x0a	; 10
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
serial_init(9600);       // doesnt work if its not done
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	95 e2       	ldi	r25, 0x25	; 37
 2a0:	de de       	rcall	.-580    	; 0x5e <serial_init>
char data[10];

	while (1)
	{
		bluetooth_read(data,3);
 2a2:	8e 01       	movw	r16, r28
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	c8 01       	movw	r24, r16
 2aa:	63 e0       	ldi	r22, 0x03	; 3
 2ac:	c7 df       	rcall	.-114    	; 0x23c <bluetooth_read>
		
		if(compare(data,"onn")==1)
 2ae:	c8 01       	movw	r24, r16
 2b0:	60 e6       	ldi	r22, 0x60	; 96
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	d5 df       	rcall	.-86     	; 0x260 <compare>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <main+0x44>
		{
		    write(portb,all,h);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	69 e0       	ldi	r22, 0x09	; 9
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	11 d1       	rcall	.+546    	; 0x4ea <write>
		}
	    if(compare(data,"off")==1)
 2c8:	c8 01       	movw	r24, r16
 2ca:	64 e6       	ldi	r22, 0x64	; 100
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	c8 df       	rcall	.-112    	; 0x260 <compare>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <main+0x5e>
		{
		    write(portb,all,l);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	69 e0       	ldi	r22, 0x09	; 9
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	04 d1       	rcall	.+520    	; 0x4ea <write>
		}
	    if(compare(data,"0")==1)
 2e2:	c8 01       	movw	r24, r16
 2e4:	68 e6       	ldi	r22, 0x68	; 104
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	bb df       	rcall	.-138    	; 0x260 <compare>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	39 f4       	brne	.+14     	; 0x2fc <main+0x78>
        {    
    	    write(portb,value,0);
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	6b e5       	ldi	r22, 0x5B	; 91
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	f7 d0       	rcall	.+494    	; 0x4ea <write>
		}
		if(compare(data,"1")==1)
 2fc:	c8 01       	movw	r24, r16
 2fe:	6a e6       	ldi	r22, 0x6A	; 106
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	ae df       	rcall	.-164    	; 0x260 <compare>
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	39 f4       	brne	.+14     	; 0x316 <main+0x92>
        {    
    	    write(portb,value,1);
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	6b e5       	ldi	r22, 0x5B	; 91
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	ea d0       	rcall	.+468    	; 0x4ea <write>
		}
		if(compare(data,"2")==1)
 316:	c8 01       	movw	r24, r16
 318:	6c e6       	ldi	r22, 0x6C	; 108
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	a1 df       	rcall	.-190    	; 0x260 <compare>
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	39 f4       	brne	.+14     	; 0x330 <main+0xac>
        {    
    	    write(portb,value,2);
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	6b e5       	ldi	r22, 0x5B	; 91
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	42 e0       	ldi	r20, 0x02	; 2
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	dd d0       	rcall	.+442    	; 0x4ea <write>
		}
		if(compare(data,"3")==1)
 330:	c8 01       	movw	r24, r16
 332:	6e e6       	ldi	r22, 0x6E	; 110
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	94 df       	rcall	.-216    	; 0x260 <compare>
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	39 f4       	brne	.+14     	; 0x34a <main+0xc6>
        {    
    	    write(portb,value,3);
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	6b e5       	ldi	r22, 0x5B	; 91
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	43 e0       	ldi	r20, 0x03	; 3
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	d0 d0       	rcall	.+416    	; 0x4ea <write>
		}
	    if(compare(data,"4")==1)
 34a:	c8 01       	movw	r24, r16
 34c:	60 e7       	ldi	r22, 0x70	; 112
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	87 df       	rcall	.-242    	; 0x260 <compare>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	39 f4       	brne	.+14     	; 0x364 <main+0xe0>
        {    
    	    write(portb,value,4);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	6b e5       	ldi	r22, 0x5B	; 91
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	44 e0       	ldi	r20, 0x04	; 4
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	c3 d0       	rcall	.+390    	; 0x4ea <write>
		}
		if(compare(data,"5")==1)
 364:	c8 01       	movw	r24, r16
 366:	62 e7       	ldi	r22, 0x72	; 114
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	7a df       	rcall	.-268    	; 0x260 <compare>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	39 f4       	brne	.+14     	; 0x37e <main+0xfa>
        {    
    	    write(portb,value,5);
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	6b e5       	ldi	r22, 0x5B	; 91
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	45 e0       	ldi	r20, 0x05	; 5
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	b6 d0       	rcall	.+364    	; 0x4ea <write>
		}
		if(compare(data,"6")==1)
 37e:	c8 01       	movw	r24, r16
 380:	64 e7       	ldi	r22, 0x74	; 116
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	6d df       	rcall	.-294    	; 0x260 <compare>
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	39 f4       	brne	.+14     	; 0x398 <main+0x114>
        {    
    	    write(portb,value,6);
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	6b e5       	ldi	r22, 0x5B	; 91
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	46 e0       	ldi	r20, 0x06	; 6
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	a9 d0       	rcall	.+338    	; 0x4ea <write>
		}
		if(compare(data,"7")==1)
 398:	c8 01       	movw	r24, r16
 39a:	66 e7       	ldi	r22, 0x76	; 118
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	60 df       	rcall	.-320    	; 0x260 <compare>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	39 f4       	brne	.+14     	; 0x3b2 <main+0x12e>
        {    
    	    write(portb,value,7);
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	6b e5       	ldi	r22, 0x5B	; 91
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	47 e0       	ldi	r20, 0x07	; 7
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	9c d0       	rcall	.+312    	; 0x4ea <write>
		}
	    if(compare(data,"8")==1)
 3b2:	c8 01       	movw	r24, r16
 3b4:	68 e7       	ldi	r22, 0x78	; 120
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	53 df       	rcall	.-346    	; 0x260 <compare>
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	39 f4       	brne	.+14     	; 0x3cc <main+0x148>
        {    
    	    write(portb,value,8);
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	6b e5       	ldi	r22, 0x5B	; 91
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	48 e0       	ldi	r20, 0x08	; 8
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	8f d0       	rcall	.+286    	; 0x4ea <write>
		}
		if(compare(data,"9")==1)
 3cc:	c8 01       	movw	r24, r16
 3ce:	6a e7       	ldi	r22, 0x7A	; 122
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	46 df       	rcall	.-372    	; 0x260 <compare>
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	39 f4       	brne	.+14     	; 0x3e6 <main+0x162>
        {    
    	    write(portb,value,9);
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	6b e5       	ldi	r22, 0x5B	; 91
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	49 e0       	ldi	r20, 0x09	; 9
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	82 d0       	rcall	.+260    	; 0x4ea <write>
		}
		if(compare(data,"10")==1)
 3e6:	c8 01       	movw	r24, r16
 3e8:	6c e7       	ldi	r22, 0x7C	; 124
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	39 df       	rcall	.-398    	; 0x260 <compare>
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <main+0x170>
 3f2:	5a cf       	rjmp	.-332    	; 0x2a8 <main+0x24>
        {    
    	    write(portb,value,10);
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	6b e5       	ldi	r22, 0x5B	; 91
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	4a e0       	ldi	r20, 0x0A	; 10
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	74 d0       	rcall	.+232    	; 0x4ea <write>
 402:	52 cf       	rjmp	.-348    	; 0x2a8 <main+0x24>

00000404 <serial_num>:
}



void serial_num(long num)
{
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	27 97       	sbiw	r28, 0x07	; 7
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
 41c:	8e 01       	movw	r16, r28
 41e:	0f 5f       	subi	r16, 0xFF	; 255
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	a8 01       	movw	r20, r16
 424:	2a e0       	ldi	r18, 0x0A	; 10
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b8 d1       	rcall	.+880    	; 0x79a <ltoa>
    serial_string(buffer);
 42a:	c8 01       	movw	r24, r16
 42c:	6a de       	rcall	.-812    	; 0x102 <serial_string>
}
 42e:	27 96       	adiw	r28, 0x07	; 7
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	cf 91       	pop	r28
 43c:	df 91       	pop	r29
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <read>:
 444:	83 30       	cpi	r24, 0x03	; 3
 446:	c9 f0       	breq	.+50     	; 0x47a <__stack+0x1b>
 448:	84 30       	cpi	r24, 0x04	; 4
 44a:	89 f1       	breq	.+98     	; 0x4ae <__stack+0x4f>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	11 f0       	breq	.+4      	; 0x454 <read+0x10>
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
 454:	69 30       	cpi	r22, 0x09	; 9
 456:	19 f4       	brne	.+6      	; 0x45e <read+0x1a>
 458:	17 ba       	out	0x17, r1	; 23
 45a:	86 b3       	in	r24, 0x16	; 22
 45c:	08 95       	ret
 45e:	87 b3       	in	r24, 0x17	; 23
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	06 2e       	mov	r0, r22
 466:	02 c0       	rjmp	.+4      	; 0x46c <__stack+0xd>
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__stack+0x9>
 470:	20 95       	com	r18
 472:	28 23       	and	r18, r24
 474:	27 bb       	out	0x17, r18	; 23
 476:	86 b3       	in	r24, 0x16	; 22
 478:	12 c0       	rjmp	.+36     	; 0x49e <__stack+0x3f>
 47a:	69 30       	cpi	r22, 0x09	; 9
 47c:	19 f4       	brne	.+6      	; 0x484 <__stack+0x25>
 47e:	14 ba       	out	0x14, r1	; 20
 480:	83 b3       	in	r24, 0x13	; 19
 482:	08 95       	ret
 484:	84 b3       	in	r24, 0x14	; 20
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	06 2e       	mov	r0, r22
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__stack+0x33>
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <__stack+0x2f>
 496:	20 95       	com	r18
 498:	28 23       	and	r18, r24
 49a:	24 bb       	out	0x14, r18	; 20
 49c:	83 b3       	in	r24, 0x13	; 19
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__stack+0x47>
 4a2:	95 95       	asr	r25
 4a4:	87 95       	ror	r24
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__stack+0x43>
 4aa:	81 70       	andi	r24, 0x01	; 1
 4ac:	08 95       	ret
 4ae:	69 30       	cpi	r22, 0x09	; 9
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <__stack+0x59>
 4b2:	11 ba       	out	0x11, r1	; 17
 4b4:	80 b3       	in	r24, 0x10	; 16
 4b6:	08 95       	ret
 4b8:	31 b3       	in	r19, 0x11	; 17
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	06 2e       	mov	r0, r22
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__stack+0x67>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__stack+0x63>
 4ca:	28 2f       	mov	r18, r24
 4cc:	20 95       	com	r18
 4ce:	23 23       	and	r18, r19
 4d0:	21 bb       	out	0x11, r18	; 17
 4d2:	22 b3       	in	r18, 0x12	; 18
 4d4:	82 2b       	or	r24, r18
 4d6:	82 bb       	out	0x12, r24	; 18
 4d8:	80 b3       	in	r24, 0x10	; 16
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__stack+0x83>
 4de:	95 95       	asr	r25
 4e0:	87 95       	ror	r24
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <__stack+0x7f>
 4e6:	81 70       	andi	r24, 0x01	; 1
 4e8:	08 95       	ret

000004ea <write>:
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	d1 f1       	breq	.+116    	; 0x562 <write+0x78>
 4ee:	84 30       	cpi	r24, 0x04	; 4
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <write+0xa>
 4f2:	6b c0       	rjmp	.+214    	; 0x5ca <write+0xe0>
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	09 f0       	breq	.+2      	; 0x4fa <write+0x10>
 4f8:	9b c0       	rjmp	.+310    	; 0x630 <write+0x146>
 4fa:	6b 35       	cpi	r22, 0x5B	; 91
 4fc:	21 f4       	brne	.+8      	; 0x506 <write+0x1c>
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	87 bb       	out	0x17, r24	; 23
 502:	48 bb       	out	0x18, r20	; 24
 504:	08 95       	ret
 506:	44 23       	and	r20, r20
 508:	21 f0       	breq	.+8      	; 0x512 <write+0x28>
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	09 f0       	breq	.+2      	; 0x510 <write+0x26>
 50e:	90 c0       	rjmp	.+288    	; 0x630 <write+0x146>
 510:	14 c0       	rjmp	.+40     	; 0x53a <write+0x50>
 512:	69 30       	cpi	r22, 0x09	; 9
 514:	21 f4       	brne	.+8      	; 0x51e <write+0x34>
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	87 bb       	out	0x17, r24	; 23
 51a:	18 ba       	out	0x18, r1	; 24
 51c:	08 95       	ret
 51e:	87 b3       	in	r24, 0x17	; 23
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <write+0x40>
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <write+0x3c>
 52e:	82 2b       	or	r24, r18
 530:	87 bb       	out	0x17, r24	; 23
 532:	88 b3       	in	r24, 0x18	; 24
 534:	20 95       	com	r18
 536:	28 23       	and	r18, r24
 538:	12 c0       	rjmp	.+36     	; 0x55e <write+0x74>
 53a:	69 30       	cpi	r22, 0x09	; 9
 53c:	21 f4       	brne	.+8      	; 0x546 <write+0x5c>
 53e:	8f ef       	ldi	r24, 0xFF	; 255
 540:	87 bb       	out	0x17, r24	; 23
 542:	88 bb       	out	0x18, r24	; 24
 544:	08 95       	ret
 546:	87 b3       	in	r24, 0x17	; 23
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <write+0x68>
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <write+0x64>
 556:	82 2b       	or	r24, r18
 558:	87 bb       	out	0x17, r24	; 23
 55a:	88 b3       	in	r24, 0x18	; 24
 55c:	28 2b       	or	r18, r24
 55e:	28 bb       	out	0x18, r18	; 24
 560:	08 95       	ret
 562:	6b 35       	cpi	r22, 0x5B	; 91
 564:	21 f4       	brne	.+8      	; 0x56e <write+0x84>
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	84 bb       	out	0x14, r24	; 20
 56a:	45 bb       	out	0x15, r20	; 21
 56c:	08 95       	ret
 56e:	44 23       	and	r20, r20
 570:	21 f0       	breq	.+8      	; 0x57a <write+0x90>
 572:	41 30       	cpi	r20, 0x01	; 1
 574:	09 f0       	breq	.+2      	; 0x578 <write+0x8e>
 576:	5c c0       	rjmp	.+184    	; 0x630 <write+0x146>
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <write+0xb8>
 57a:	69 30       	cpi	r22, 0x09	; 9
 57c:	21 f4       	brne	.+8      	; 0x586 <write+0x9c>
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	84 bb       	out	0x14, r24	; 20
 582:	15 ba       	out	0x15, r1	; 21
 584:	08 95       	ret
 586:	84 b3       	in	r24, 0x14	; 20
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <write+0xa8>
 58e:	22 0f       	add	r18, r18
 590:	33 1f       	adc	r19, r19
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <write+0xa4>
 596:	82 2b       	or	r24, r18
 598:	84 bb       	out	0x14, r24	; 20
 59a:	85 b3       	in	r24, 0x15	; 21
 59c:	20 95       	com	r18
 59e:	28 23       	and	r18, r24
 5a0:	12 c0       	rjmp	.+36     	; 0x5c6 <write+0xdc>
 5a2:	69 30       	cpi	r22, 0x09	; 9
 5a4:	21 f4       	brne	.+8      	; 0x5ae <write+0xc4>
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	84 bb       	out	0x14, r24	; 20
 5aa:	85 bb       	out	0x15, r24	; 21
 5ac:	08 95       	ret
 5ae:	84 b3       	in	r24, 0x14	; 20
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <write+0xd0>
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <write+0xcc>
 5be:	82 2b       	or	r24, r18
 5c0:	84 bb       	out	0x14, r24	; 20
 5c2:	85 b3       	in	r24, 0x15	; 21
 5c4:	28 2b       	or	r18, r24
 5c6:	25 bb       	out	0x15, r18	; 21
 5c8:	08 95       	ret
 5ca:	6b 35       	cpi	r22, 0x5B	; 91
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <write+0xec>
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	81 bb       	out	0x11, r24	; 17
 5d2:	42 bb       	out	0x12, r20	; 18
 5d4:	08 95       	ret
 5d6:	44 23       	and	r20, r20
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <write+0xf6>
 5da:	41 30       	cpi	r20, 0x01	; 1
 5dc:	49 f5       	brne	.+82     	; 0x630 <write+0x146>
 5de:	15 c0       	rjmp	.+42     	; 0x60a <write+0x120>
 5e0:	69 30       	cpi	r22, 0x09	; 9
 5e2:	21 f4       	brne	.+8      	; 0x5ec <write+0x102>
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	81 bb       	out	0x11, r24	; 17
 5e8:	12 ba       	out	0x12, r1	; 18
 5ea:	08 95       	ret
 5ec:	81 b3       	in	r24, 0x11	; 17
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <write+0x10e>
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <write+0x10a>
 5fc:	82 2b       	or	r24, r18
 5fe:	81 bb       	out	0x11, r24	; 17
 600:	82 b3       	in	r24, 0x12	; 18
 602:	20 95       	com	r18
 604:	28 23       	and	r18, r24
 606:	22 bb       	out	0x12, r18	; 18
 608:	08 95       	ret
 60a:	69 30       	cpi	r22, 0x09	; 9
 60c:	21 f4       	brne	.+8      	; 0x616 <write+0x12c>
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	81 bb       	out	0x11, r24	; 17
 612:	82 bb       	out	0x12, r24	; 18
 614:	08 95       	ret
 616:	81 b3       	in	r24, 0x11	; 17
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <write+0x138>
 61e:	22 0f       	add	r18, r18
 620:	33 1f       	adc	r19, r19
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <write+0x134>
 626:	82 2b       	or	r24, r18
 628:	81 bb       	out	0x11, r24	; 17
 62a:	82 b3       	in	r24, 0x12	; 18
 62c:	28 2b       	or	r18, r24
 62e:	22 bb       	out	0x12, r18	; 18
 630:	08 95       	ret

00000632 <direction>:
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	19 f1       	breq	.+70     	; 0x67c <direction+0x4a>
 636:	84 30       	cpi	r24, 0x04	; 4
 638:	09 f4       	brne	.+2      	; 0x63c <direction+0xa>
 63a:	3c c0       	rjmp	.+120    	; 0x6b4 <direction+0x82>
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	09 f0       	breq	.+2      	; 0x642 <direction+0x10>
 640:	54 c0       	rjmp	.+168    	; 0x6ea <direction+0xb8>
 642:	44 23       	and	r20, r20
 644:	21 f0       	breq	.+8      	; 0x64e <direction+0x1c>
 646:	41 30       	cpi	r20, 0x01	; 1
 648:	09 f0       	breq	.+2      	; 0x64c <direction+0x1a>
 64a:	4f c0       	rjmp	.+158    	; 0x6ea <direction+0xb8>
 64c:	0c c0       	rjmp	.+24     	; 0x666 <direction+0x34>
 64e:	27 b3       	in	r18, 0x17	; 23
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <direction+0x28>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <direction+0x24>
 65e:	80 95       	com	r24
 660:	82 23       	and	r24, r18
 662:	87 bb       	out	0x17, r24	; 23
 664:	08 95       	ret
 666:	27 b3       	in	r18, 0x17	; 23
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <direction+0x40>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	6a 95       	dec	r22
 674:	e2 f7       	brpl	.-8      	; 0x66e <direction+0x3c>
 676:	28 2b       	or	r18, r24
 678:	27 bb       	out	0x17, r18	; 23
 67a:	08 95       	ret
 67c:	44 23       	and	r20, r20
 67e:	19 f0       	breq	.+6      	; 0x686 <direction+0x54>
 680:	41 30       	cpi	r20, 0x01	; 1
 682:	99 f5       	brne	.+102    	; 0x6ea <direction+0xb8>
 684:	0c c0       	rjmp	.+24     	; 0x69e <direction+0x6c>
 686:	24 b3       	in	r18, 0x14	; 20
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <direction+0x60>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	6a 95       	dec	r22
 694:	e2 f7       	brpl	.-8      	; 0x68e <direction+0x5c>
 696:	80 95       	com	r24
 698:	82 23       	and	r24, r18
 69a:	84 bb       	out	0x14, r24	; 20
 69c:	08 95       	ret
 69e:	24 b3       	in	r18, 0x14	; 20
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <direction+0x78>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <direction+0x74>
 6ae:	28 2b       	or	r18, r24
 6b0:	24 bb       	out	0x14, r18	; 20
 6b2:	08 95       	ret
 6b4:	44 23       	and	r20, r20
 6b6:	19 f0       	breq	.+6      	; 0x6be <direction+0x8c>
 6b8:	41 30       	cpi	r20, 0x01	; 1
 6ba:	b9 f4       	brne	.+46     	; 0x6ea <direction+0xb8>
 6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <direction+0xa4>
 6be:	21 b3       	in	r18, 0x11	; 17
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <direction+0x98>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <direction+0x94>
 6ce:	80 95       	com	r24
 6d0:	82 23       	and	r24, r18
 6d2:	81 bb       	out	0x11, r24	; 17
 6d4:	08 95       	ret
 6d6:	21 b3       	in	r18, 0x11	; 17
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <direction+0xb0>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <direction+0xac>
 6e6:	28 2b       	or	r18, r24
 6e8:	21 bb       	out	0x11, r18	; 17
 6ea:	08 95       	ret

000006ec <__udivmodsi4>:
 6ec:	a1 e2       	ldi	r26, 0x21	; 33
 6ee:	1a 2e       	mov	r1, r26
 6f0:	aa 1b       	sub	r26, r26
 6f2:	bb 1b       	sub	r27, r27
 6f4:	fd 01       	movw	r30, r26
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <__udivmodsi4_ep>

000006f8 <__udivmodsi4_loop>:
 6f8:	aa 1f       	adc	r26, r26
 6fa:	bb 1f       	adc	r27, r27
 6fc:	ee 1f       	adc	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	a2 17       	cp	r26, r18
 702:	b3 07       	cpc	r27, r19
 704:	e4 07       	cpc	r30, r20
 706:	f5 07       	cpc	r31, r21
 708:	20 f0       	brcs	.+8      	; 0x712 <__udivmodsi4_ep>
 70a:	a2 1b       	sub	r26, r18
 70c:	b3 0b       	sbc	r27, r19
 70e:	e4 0b       	sbc	r30, r20
 710:	f5 0b       	sbc	r31, r21

00000712 <__udivmodsi4_ep>:
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a 94       	dec	r1
 71c:	69 f7       	brne	.-38     	; 0x6f8 <__udivmodsi4_loop>
 71e:	60 95       	com	r22
 720:	70 95       	com	r23
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	bd 01       	movw	r22, r26
 72c:	cf 01       	movw	r24, r30
 72e:	08 95       	ret

00000730 <atoi>:
 730:	fc 01       	movw	r30, r24
 732:	88 27       	eor	r24, r24
 734:	99 27       	eor	r25, r25
 736:	e8 94       	clt
 738:	21 91       	ld	r18, Z+
 73a:	20 32       	cpi	r18, 0x20	; 32
 73c:	e9 f3       	breq	.-6      	; 0x738 <atoi+0x8>
 73e:	29 30       	cpi	r18, 0x09	; 9
 740:	10 f0       	brcs	.+4      	; 0x746 <atoi+0x16>
 742:	2e 30       	cpi	r18, 0x0E	; 14
 744:	c8 f3       	brcs	.-14     	; 0x738 <atoi+0x8>
 746:	2b 32       	cpi	r18, 0x2B	; 43
 748:	39 f0       	breq	.+14     	; 0x758 <atoi+0x28>
 74a:	2d 32       	cpi	r18, 0x2D	; 45
 74c:	31 f4       	brne	.+12     	; 0x75a <atoi+0x2a>
 74e:	68 94       	set
 750:	03 c0       	rjmp	.+6      	; 0x758 <atoi+0x28>
 752:	55 d0       	rcall	.+170    	; 0x7fe <__mulhi_const_10>
 754:	82 0f       	add	r24, r18
 756:	91 1d       	adc	r25, r1
 758:	21 91       	ld	r18, Z+
 75a:	20 53       	subi	r18, 0x30	; 48
 75c:	2a 30       	cpi	r18, 0x0A	; 10
 75e:	c8 f3       	brcs	.-14     	; 0x752 <atoi+0x22>
 760:	1e f4       	brtc	.+6      	; 0x768 <atoi+0x38>
 762:	90 95       	com	r25
 764:	81 95       	neg	r24
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	08 95       	ret

0000076a <strncasecmp>:
 76a:	fb 01       	movw	r30, r22
 76c:	dc 01       	movw	r26, r24
 76e:	41 50       	subi	r20, 0x01	; 1
 770:	50 40       	sbci	r21, 0x00	; 0
 772:	88 f0       	brcs	.+34     	; 0x796 <strncasecmp+0x2c>
 774:	8d 91       	ld	r24, X+
 776:	81 34       	cpi	r24, 0x41	; 65
 778:	1c f0       	brlt	.+6      	; 0x780 <strncasecmp+0x16>
 77a:	8b 35       	cpi	r24, 0x5B	; 91
 77c:	0c f4       	brge	.+2      	; 0x780 <strncasecmp+0x16>
 77e:	80 5e       	subi	r24, 0xE0	; 224
 780:	61 91       	ld	r22, Z+
 782:	61 34       	cpi	r22, 0x41	; 65
 784:	1c f0       	brlt	.+6      	; 0x78c <strncasecmp+0x22>
 786:	6b 35       	cpi	r22, 0x5B	; 91
 788:	0c f4       	brge	.+2      	; 0x78c <strncasecmp+0x22>
 78a:	60 5e       	subi	r22, 0xE0	; 224
 78c:	86 1b       	sub	r24, r22
 78e:	61 11       	cpse	r22, r1
 790:	71 f3       	breq	.-36     	; 0x76e <strncasecmp+0x4>
 792:	99 0b       	sbc	r25, r25
 794:	08 95       	ret
 796:	88 1b       	sub	r24, r24
 798:	fc cf       	rjmp	.-8      	; 0x792 <strncasecmp+0x28>

0000079a <ltoa>:
 79a:	fa 01       	movw	r30, r20
 79c:	cf 93       	push	r28
 79e:	ff 93       	push	r31
 7a0:	ef 93       	push	r30
 7a2:	22 30       	cpi	r18, 0x02	; 2
 7a4:	3c f1       	brlt	.+78     	; 0x7f4 <ltoa+0x5a>
 7a6:	25 32       	cpi	r18, 0x25	; 37
 7a8:	2c f5       	brge	.+74     	; 0x7f4 <ltoa+0x5a>
 7aa:	c2 2f       	mov	r28, r18
 7ac:	e8 94       	clt
 7ae:	ca 30       	cpi	r28, 0x0A	; 10
 7b0:	49 f4       	brne	.+18     	; 0x7c4 <ltoa+0x2a>
 7b2:	97 fb       	bst	r25, 7
 7b4:	3e f4       	brtc	.+14     	; 0x7c4 <ltoa+0x2a>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	2c 2f       	mov	r18, r28
 7c6:	33 27       	eor	r19, r19
 7c8:	44 27       	eor	r20, r20
 7ca:	55 27       	eor	r21, r21
 7cc:	ff 93       	push	r31
 7ce:	ef 93       	push	r30
 7d0:	8d df       	rcall	.-230    	; 0x6ec <__udivmodsi4>
 7d2:	ef 91       	pop	r30
 7d4:	ff 91       	pop	r31
 7d6:	60 5d       	subi	r22, 0xD0	; 208
 7d8:	6a 33       	cpi	r22, 0x3A	; 58
 7da:	0c f0       	brlt	.+2      	; 0x7de <ltoa+0x44>
 7dc:	69 5d       	subi	r22, 0xD9	; 217
 7de:	61 93       	st	Z+, r22
 7e0:	b9 01       	movw	r22, r18
 7e2:	ca 01       	movw	r24, r20
 7e4:	60 50       	subi	r22, 0x00	; 0
 7e6:	70 40       	sbci	r23, 0x00	; 0
 7e8:	80 40       	sbci	r24, 0x00	; 0
 7ea:	90 40       	sbci	r25, 0x00	; 0
 7ec:	59 f7       	brne	.-42     	; 0x7c4 <ltoa+0x2a>
 7ee:	16 f4       	brtc	.+4      	; 0x7f4 <ltoa+0x5a>
 7f0:	cd e2       	ldi	r28, 0x2D	; 45
 7f2:	c1 93       	st	Z+, r28
 7f4:	10 82       	st	Z, r1
 7f6:	8f 91       	pop	r24
 7f8:	9f 91       	pop	r25
 7fa:	cf 91       	pop	r28
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <strrev>

000007fe <__mulhi_const_10>:
 7fe:	7a e0       	ldi	r23, 0x0A	; 10
 800:	97 9f       	mul	r25, r23
 802:	90 2d       	mov	r25, r0
 804:	87 9f       	mul	r24, r23
 806:	80 2d       	mov	r24, r0
 808:	91 0d       	add	r25, r1
 80a:	11 24       	eor	r1, r1
 80c:	08 95       	ret

0000080e <strrev>:
 80e:	dc 01       	movw	r26, r24
 810:	fc 01       	movw	r30, r24
 812:	67 2f       	mov	r22, r23
 814:	71 91       	ld	r23, Z+
 816:	77 23       	and	r23, r23
 818:	e1 f7       	brne	.-8      	; 0x812 <strrev+0x4>
 81a:	32 97       	sbiw	r30, 0x02	; 2
 81c:	04 c0       	rjmp	.+8      	; 0x826 <strrev+0x18>
 81e:	7c 91       	ld	r23, X
 820:	6d 93       	st	X+, r22
 822:	70 83       	st	Z, r23
 824:	62 91       	ld	r22, -Z
 826:	ae 17       	cp	r26, r30
 828:	bf 07       	cpc	r27, r31
 82a:	c8 f3       	brcs	.-14     	; 0x81e <strrev+0x10>
 82c:	08 95       	ret

0000082e <_exit>:
 82e:	f8 94       	cli

00000830 <__stop_program>:
 830:	ff cf       	rjmp	.-2      	; 0x830 <__stop_program>
